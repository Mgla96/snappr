// Code generated by counterfeiter. DO NOT EDIT.
package appfakes

import (
	"context"
	"sync"

	"github.com/Mgla96/snappr/internal/adapters/clients"
	openai "github.com/sashabaranov/go-openai"
)

type FakeLlmClient struct {
	GenerateChatCompletionStub        func(context.Context, []openai.ChatCompletionMessage, clients.ModelType) (string, error)
	generateChatCompletionMutex       sync.RWMutex
	generateChatCompletionArgsForCall []struct {
		arg1 context.Context
		arg2 []openai.ChatCompletionMessage
		arg3 clients.ModelType
	}
	generateChatCompletionReturns struct {
		result1 string
		result2 error
	}
	generateChatCompletionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLlmClient) GenerateChatCompletion(arg1 context.Context, arg2 []openai.ChatCompletionMessage, arg3 clients.ModelType) (string, error) {
	var arg2Copy []openai.ChatCompletionMessage
	if arg2 != nil {
		arg2Copy = make([]openai.ChatCompletionMessage, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.generateChatCompletionMutex.Lock()
	ret, specificReturn := fake.generateChatCompletionReturnsOnCall[len(fake.generateChatCompletionArgsForCall)]
	fake.generateChatCompletionArgsForCall = append(fake.generateChatCompletionArgsForCall, struct {
		arg1 context.Context
		arg2 []openai.ChatCompletionMessage
		arg3 clients.ModelType
	}{arg1, arg2Copy, arg3})
	stub := fake.GenerateChatCompletionStub
	fakeReturns := fake.generateChatCompletionReturns
	fake.recordInvocation("GenerateChatCompletion", []interface{}{arg1, arg2Copy, arg3})
	fake.generateChatCompletionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLlmClient) GenerateChatCompletionCallCount() int {
	fake.generateChatCompletionMutex.RLock()
	defer fake.generateChatCompletionMutex.RUnlock()
	return len(fake.generateChatCompletionArgsForCall)
}

func (fake *FakeLlmClient) GenerateChatCompletionCalls(stub func(context.Context, []openai.ChatCompletionMessage, clients.ModelType) (string, error)) {
	fake.generateChatCompletionMutex.Lock()
	defer fake.generateChatCompletionMutex.Unlock()
	fake.GenerateChatCompletionStub = stub
}

func (fake *FakeLlmClient) GenerateChatCompletionArgsForCall(i int) (context.Context, []openai.ChatCompletionMessage, clients.ModelType) {
	fake.generateChatCompletionMutex.RLock()
	defer fake.generateChatCompletionMutex.RUnlock()
	argsForCall := fake.generateChatCompletionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeLlmClient) GenerateChatCompletionReturns(result1 string, result2 error) {
	fake.generateChatCompletionMutex.Lock()
	defer fake.generateChatCompletionMutex.Unlock()
	fake.GenerateChatCompletionStub = nil
	fake.generateChatCompletionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLlmClient) GenerateChatCompletionReturnsOnCall(i int, result1 string, result2 error) {
	fake.generateChatCompletionMutex.Lock()
	defer fake.generateChatCompletionMutex.Unlock()
	fake.GenerateChatCompletionStub = nil
	if fake.generateChatCompletionReturnsOnCall == nil {
		fake.generateChatCompletionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateChatCompletionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLlmClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateChatCompletionMutex.RLock()
	defer fake.generateChatCompletionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLlmClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
