// Code generated by counterfeiter. DO NOT EDIT.
package clientsfakes

import (
	"context"
	"sync"

	"github.com/google/go-github/v66/github"
)

type FakePullRequestService struct {
	CreateStub        func(context.Context, string, string, *github.NewPullRequest) (*github.PullRequest, *github.Response, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.NewPullRequest
	}
	createReturns struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}
	createReturnsOnCall map[int]struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}
	CreateCommentStub        func(context.Context, string, string, int, *github.PullRequestComment) (*github.PullRequestComment, *github.Response, error)
	createCommentMutex       sync.RWMutex
	createCommentArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 *github.PullRequestComment
	}
	createCommentReturns struct {
		result1 *github.PullRequestComment
		result2 *github.Response
		result3 error
	}
	createCommentReturnsOnCall map[int]struct {
		result1 *github.PullRequestComment
		result2 *github.Response
		result3 error
	}
	CreateReviewStub        func(context.Context, string, string, int, *github.PullRequestReviewRequest) (*github.PullRequestReview, *github.Response, error)
	createReviewMutex       sync.RWMutex
	createReviewArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 *github.PullRequestReviewRequest
	}
	createReviewReturns struct {
		result1 *github.PullRequestReview
		result2 *github.Response
		result3 error
	}
	createReviewReturnsOnCall map[int]struct {
		result1 *github.PullRequestReview
		result2 *github.Response
		result3 error
	}
	GetStub        func(context.Context, string, string, int) (*github.PullRequest, *github.Response, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}
	getReturns struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}
	getReturnsOnCall map[int]struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}
	GetCommentStub        func(context.Context, string, string, int64) (*github.PullRequestComment, *github.Response, error)
	getCommentMutex       sync.RWMutex
	getCommentArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
	}
	getCommentReturns struct {
		result1 *github.PullRequestComment
		result2 *github.Response
		result3 error
	}
	getCommentReturnsOnCall map[int]struct {
		result1 *github.PullRequestComment
		result2 *github.Response
		result3 error
	}
	GetRawStub        func(context.Context, string, string, int, github.RawOptions) (string, *github.Response, error)
	getRawMutex       sync.RWMutex
	getRawArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 github.RawOptions
	}
	getRawReturns struct {
		result1 string
		result2 *github.Response
		result3 error
	}
	getRawReturnsOnCall map[int]struct {
		result1 string
		result2 *github.Response
		result3 error
	}
	ListStub        func(context.Context, string, string, *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.PullRequestListOptions
	}
	listReturns struct {
		result1 []*github.PullRequest
		result2 *github.Response
		result3 error
	}
	listReturnsOnCall map[int]struct {
		result1 []*github.PullRequest
		result2 *github.Response
		result3 error
	}
	ListFilesStub        func(context.Context, string, string, int, *github.ListOptions) ([]*github.CommitFile, *github.Response, error)
	listFilesMutex       sync.RWMutex
	listFilesArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 *github.ListOptions
	}
	listFilesReturns struct {
		result1 []*github.CommitFile
		result2 *github.Response
		result3 error
	}
	listFilesReturnsOnCall map[int]struct {
		result1 []*github.CommitFile
		result2 *github.Response
		result3 error
	}
	MergeStub        func(context.Context, string, string, int, string, *github.PullRequestOptions) (*github.PullRequestMergeResult, *github.Response, error)
	mergeMutex       sync.RWMutex
	mergeArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 string
		arg6 *github.PullRequestOptions
	}
	mergeReturns struct {
		result1 *github.PullRequestMergeResult
		result2 *github.Response
		result3 error
	}
	mergeReturnsOnCall map[int]struct {
		result1 *github.PullRequestMergeResult
		result2 *github.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePullRequestService) Create(arg1 context.Context, arg2 string, arg3 string, arg4 *github.NewPullRequest) (*github.PullRequest, *github.Response, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.NewPullRequest
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2, arg3, arg4})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePullRequestService) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakePullRequestService) CreateCalls(stub func(context.Context, string, string, *github.NewPullRequest) (*github.PullRequest, *github.Response, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakePullRequestService) CreateArgsForCall(i int) (context.Context, string, string, *github.NewPullRequest) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePullRequestService) CreateReturns(result1 *github.PullRequest, result2 *github.Response, result3 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) CreateReturnsOnCall(i int, result1 *github.PullRequest, result2 *github.Response, result3 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *github.PullRequest
			result2 *github.Response
			result3 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) CreateComment(arg1 context.Context, arg2 string, arg3 string, arg4 int, arg5 *github.PullRequestComment) (*github.PullRequestComment, *github.Response, error) {
	fake.createCommentMutex.Lock()
	ret, specificReturn := fake.createCommentReturnsOnCall[len(fake.createCommentArgsForCall)]
	fake.createCommentArgsForCall = append(fake.createCommentArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 *github.PullRequestComment
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.CreateCommentStub
	fakeReturns := fake.createCommentReturns
	fake.recordInvocation("CreateComment", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.createCommentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePullRequestService) CreateCommentCallCount() int {
	fake.createCommentMutex.RLock()
	defer fake.createCommentMutex.RUnlock()
	return len(fake.createCommentArgsForCall)
}

func (fake *FakePullRequestService) CreateCommentCalls(stub func(context.Context, string, string, int, *github.PullRequestComment) (*github.PullRequestComment, *github.Response, error)) {
	fake.createCommentMutex.Lock()
	defer fake.createCommentMutex.Unlock()
	fake.CreateCommentStub = stub
}

func (fake *FakePullRequestService) CreateCommentArgsForCall(i int) (context.Context, string, string, int, *github.PullRequestComment) {
	fake.createCommentMutex.RLock()
	defer fake.createCommentMutex.RUnlock()
	argsForCall := fake.createCommentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakePullRequestService) CreateCommentReturns(result1 *github.PullRequestComment, result2 *github.Response, result3 error) {
	fake.createCommentMutex.Lock()
	defer fake.createCommentMutex.Unlock()
	fake.CreateCommentStub = nil
	fake.createCommentReturns = struct {
		result1 *github.PullRequestComment
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) CreateCommentReturnsOnCall(i int, result1 *github.PullRequestComment, result2 *github.Response, result3 error) {
	fake.createCommentMutex.Lock()
	defer fake.createCommentMutex.Unlock()
	fake.CreateCommentStub = nil
	if fake.createCommentReturnsOnCall == nil {
		fake.createCommentReturnsOnCall = make(map[int]struct {
			result1 *github.PullRequestComment
			result2 *github.Response
			result3 error
		})
	}
	fake.createCommentReturnsOnCall[i] = struct {
		result1 *github.PullRequestComment
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) CreateReview(arg1 context.Context, arg2 string, arg3 string, arg4 int, arg5 *github.PullRequestReviewRequest) (*github.PullRequestReview, *github.Response, error) {
	fake.createReviewMutex.Lock()
	ret, specificReturn := fake.createReviewReturnsOnCall[len(fake.createReviewArgsForCall)]
	fake.createReviewArgsForCall = append(fake.createReviewArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 *github.PullRequestReviewRequest
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.CreateReviewStub
	fakeReturns := fake.createReviewReturns
	fake.recordInvocation("CreateReview", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.createReviewMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePullRequestService) CreateReviewCallCount() int {
	fake.createReviewMutex.RLock()
	defer fake.createReviewMutex.RUnlock()
	return len(fake.createReviewArgsForCall)
}

func (fake *FakePullRequestService) CreateReviewCalls(stub func(context.Context, string, string, int, *github.PullRequestReviewRequest) (*github.PullRequestReview, *github.Response, error)) {
	fake.createReviewMutex.Lock()
	defer fake.createReviewMutex.Unlock()
	fake.CreateReviewStub = stub
}

func (fake *FakePullRequestService) CreateReviewArgsForCall(i int) (context.Context, string, string, int, *github.PullRequestReviewRequest) {
	fake.createReviewMutex.RLock()
	defer fake.createReviewMutex.RUnlock()
	argsForCall := fake.createReviewArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakePullRequestService) CreateReviewReturns(result1 *github.PullRequestReview, result2 *github.Response, result3 error) {
	fake.createReviewMutex.Lock()
	defer fake.createReviewMutex.Unlock()
	fake.CreateReviewStub = nil
	fake.createReviewReturns = struct {
		result1 *github.PullRequestReview
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) CreateReviewReturnsOnCall(i int, result1 *github.PullRequestReview, result2 *github.Response, result3 error) {
	fake.createReviewMutex.Lock()
	defer fake.createReviewMutex.Unlock()
	fake.CreateReviewStub = nil
	if fake.createReviewReturnsOnCall == nil {
		fake.createReviewReturnsOnCall = make(map[int]struct {
			result1 *github.PullRequestReview
			result2 *github.Response
			result3 error
		})
	}
	fake.createReviewReturnsOnCall[i] = struct {
		result1 *github.PullRequestReview
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) Get(arg1 context.Context, arg2 string, arg3 string, arg4 int) (*github.PullRequest, *github.Response, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2, arg3, arg4})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePullRequestService) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakePullRequestService) GetCalls(stub func(context.Context, string, string, int) (*github.PullRequest, *github.Response, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakePullRequestService) GetArgsForCall(i int) (context.Context, string, string, int) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePullRequestService) GetReturns(result1 *github.PullRequest, result2 *github.Response, result3 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) GetReturnsOnCall(i int, result1 *github.PullRequest, result2 *github.Response, result3 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *github.PullRequest
			result2 *github.Response
			result3 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *github.PullRequest
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) GetComment(arg1 context.Context, arg2 string, arg3 string, arg4 int64) (*github.PullRequestComment, *github.Response, error) {
	fake.getCommentMutex.Lock()
	ret, specificReturn := fake.getCommentReturnsOnCall[len(fake.getCommentArgsForCall)]
	fake.getCommentArgsForCall = append(fake.getCommentArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetCommentStub
	fakeReturns := fake.getCommentReturns
	fake.recordInvocation("GetComment", []interface{}{arg1, arg2, arg3, arg4})
	fake.getCommentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePullRequestService) GetCommentCallCount() int {
	fake.getCommentMutex.RLock()
	defer fake.getCommentMutex.RUnlock()
	return len(fake.getCommentArgsForCall)
}

func (fake *FakePullRequestService) GetCommentCalls(stub func(context.Context, string, string, int64) (*github.PullRequestComment, *github.Response, error)) {
	fake.getCommentMutex.Lock()
	defer fake.getCommentMutex.Unlock()
	fake.GetCommentStub = stub
}

func (fake *FakePullRequestService) GetCommentArgsForCall(i int) (context.Context, string, string, int64) {
	fake.getCommentMutex.RLock()
	defer fake.getCommentMutex.RUnlock()
	argsForCall := fake.getCommentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePullRequestService) GetCommentReturns(result1 *github.PullRequestComment, result2 *github.Response, result3 error) {
	fake.getCommentMutex.Lock()
	defer fake.getCommentMutex.Unlock()
	fake.GetCommentStub = nil
	fake.getCommentReturns = struct {
		result1 *github.PullRequestComment
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) GetCommentReturnsOnCall(i int, result1 *github.PullRequestComment, result2 *github.Response, result3 error) {
	fake.getCommentMutex.Lock()
	defer fake.getCommentMutex.Unlock()
	fake.GetCommentStub = nil
	if fake.getCommentReturnsOnCall == nil {
		fake.getCommentReturnsOnCall = make(map[int]struct {
			result1 *github.PullRequestComment
			result2 *github.Response
			result3 error
		})
	}
	fake.getCommentReturnsOnCall[i] = struct {
		result1 *github.PullRequestComment
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) GetRaw(arg1 context.Context, arg2 string, arg3 string, arg4 int, arg5 github.RawOptions) (string, *github.Response, error) {
	fake.getRawMutex.Lock()
	ret, specificReturn := fake.getRawReturnsOnCall[len(fake.getRawArgsForCall)]
	fake.getRawArgsForCall = append(fake.getRawArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 github.RawOptions
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.GetRawStub
	fakeReturns := fake.getRawReturns
	fake.recordInvocation("GetRaw", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.getRawMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePullRequestService) GetRawCallCount() int {
	fake.getRawMutex.RLock()
	defer fake.getRawMutex.RUnlock()
	return len(fake.getRawArgsForCall)
}

func (fake *FakePullRequestService) GetRawCalls(stub func(context.Context, string, string, int, github.RawOptions) (string, *github.Response, error)) {
	fake.getRawMutex.Lock()
	defer fake.getRawMutex.Unlock()
	fake.GetRawStub = stub
}

func (fake *FakePullRequestService) GetRawArgsForCall(i int) (context.Context, string, string, int, github.RawOptions) {
	fake.getRawMutex.RLock()
	defer fake.getRawMutex.RUnlock()
	argsForCall := fake.getRawArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakePullRequestService) GetRawReturns(result1 string, result2 *github.Response, result3 error) {
	fake.getRawMutex.Lock()
	defer fake.getRawMutex.Unlock()
	fake.GetRawStub = nil
	fake.getRawReturns = struct {
		result1 string
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) GetRawReturnsOnCall(i int, result1 string, result2 *github.Response, result3 error) {
	fake.getRawMutex.Lock()
	defer fake.getRawMutex.Unlock()
	fake.GetRawStub = nil
	if fake.getRawReturnsOnCall == nil {
		fake.getRawReturnsOnCall = make(map[int]struct {
			result1 string
			result2 *github.Response
			result3 error
		})
	}
	fake.getRawReturnsOnCall[i] = struct {
		result1 string
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) List(arg1 context.Context, arg2 string, arg3 string, arg4 *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *github.PullRequestListOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1, arg2, arg3, arg4})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePullRequestService) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakePullRequestService) ListCalls(stub func(context.Context, string, string, *github.PullRequestListOptions) ([]*github.PullRequest, *github.Response, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakePullRequestService) ListArgsForCall(i int) (context.Context, string, string, *github.PullRequestListOptions) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakePullRequestService) ListReturns(result1 []*github.PullRequest, result2 *github.Response, result3 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []*github.PullRequest
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) ListReturnsOnCall(i int, result1 []*github.PullRequest, result2 *github.Response, result3 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []*github.PullRequest
			result2 *github.Response
			result3 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []*github.PullRequest
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) ListFiles(arg1 context.Context, arg2 string, arg3 string, arg4 int, arg5 *github.ListOptions) ([]*github.CommitFile, *github.Response, error) {
	fake.listFilesMutex.Lock()
	ret, specificReturn := fake.listFilesReturnsOnCall[len(fake.listFilesArgsForCall)]
	fake.listFilesArgsForCall = append(fake.listFilesArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 *github.ListOptions
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ListFilesStub
	fakeReturns := fake.listFilesReturns
	fake.recordInvocation("ListFiles", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.listFilesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePullRequestService) ListFilesCallCount() int {
	fake.listFilesMutex.RLock()
	defer fake.listFilesMutex.RUnlock()
	return len(fake.listFilesArgsForCall)
}

func (fake *FakePullRequestService) ListFilesCalls(stub func(context.Context, string, string, int, *github.ListOptions) ([]*github.CommitFile, *github.Response, error)) {
	fake.listFilesMutex.Lock()
	defer fake.listFilesMutex.Unlock()
	fake.ListFilesStub = stub
}

func (fake *FakePullRequestService) ListFilesArgsForCall(i int) (context.Context, string, string, int, *github.ListOptions) {
	fake.listFilesMutex.RLock()
	defer fake.listFilesMutex.RUnlock()
	argsForCall := fake.listFilesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakePullRequestService) ListFilesReturns(result1 []*github.CommitFile, result2 *github.Response, result3 error) {
	fake.listFilesMutex.Lock()
	defer fake.listFilesMutex.Unlock()
	fake.ListFilesStub = nil
	fake.listFilesReturns = struct {
		result1 []*github.CommitFile
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) ListFilesReturnsOnCall(i int, result1 []*github.CommitFile, result2 *github.Response, result3 error) {
	fake.listFilesMutex.Lock()
	defer fake.listFilesMutex.Unlock()
	fake.ListFilesStub = nil
	if fake.listFilesReturnsOnCall == nil {
		fake.listFilesReturnsOnCall = make(map[int]struct {
			result1 []*github.CommitFile
			result2 *github.Response
			result3 error
		})
	}
	fake.listFilesReturnsOnCall[i] = struct {
		result1 []*github.CommitFile
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) Merge(arg1 context.Context, arg2 string, arg3 string, arg4 int, arg5 string, arg6 *github.PullRequestOptions) (*github.PullRequestMergeResult, *github.Response, error) {
	fake.mergeMutex.Lock()
	ret, specificReturn := fake.mergeReturnsOnCall[len(fake.mergeArgsForCall)]
	fake.mergeArgsForCall = append(fake.mergeArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
		arg5 string
		arg6 *github.PullRequestOptions
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.MergeStub
	fakeReturns := fake.mergeReturns
	fake.recordInvocation("Merge", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.mergeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakePullRequestService) MergeCallCount() int {
	fake.mergeMutex.RLock()
	defer fake.mergeMutex.RUnlock()
	return len(fake.mergeArgsForCall)
}

func (fake *FakePullRequestService) MergeCalls(stub func(context.Context, string, string, int, string, *github.PullRequestOptions) (*github.PullRequestMergeResult, *github.Response, error)) {
	fake.mergeMutex.Lock()
	defer fake.mergeMutex.Unlock()
	fake.MergeStub = stub
}

func (fake *FakePullRequestService) MergeArgsForCall(i int) (context.Context, string, string, int, string, *github.PullRequestOptions) {
	fake.mergeMutex.RLock()
	defer fake.mergeMutex.RUnlock()
	argsForCall := fake.mergeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakePullRequestService) MergeReturns(result1 *github.PullRequestMergeResult, result2 *github.Response, result3 error) {
	fake.mergeMutex.Lock()
	defer fake.mergeMutex.Unlock()
	fake.MergeStub = nil
	fake.mergeReturns = struct {
		result1 *github.PullRequestMergeResult
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) MergeReturnsOnCall(i int, result1 *github.PullRequestMergeResult, result2 *github.Response, result3 error) {
	fake.mergeMutex.Lock()
	defer fake.mergeMutex.Unlock()
	fake.MergeStub = nil
	if fake.mergeReturnsOnCall == nil {
		fake.mergeReturnsOnCall = make(map[int]struct {
			result1 *github.PullRequestMergeResult
			result2 *github.Response
			result3 error
		})
	}
	fake.mergeReturnsOnCall[i] = struct {
		result1 *github.PullRequestMergeResult
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePullRequestService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.createCommentMutex.RLock()
	defer fake.createCommentMutex.RUnlock()
	fake.createReviewMutex.RLock()
	defer fake.createReviewMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getCommentMutex.RLock()
	defer fake.getCommentMutex.RUnlock()
	fake.getRawMutex.RLock()
	defer fake.getRawMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.listFilesMutex.RLock()
	defer fake.listFilesMutex.RUnlock()
	fake.mergeMutex.RLock()
	defer fake.mergeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePullRequestService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
